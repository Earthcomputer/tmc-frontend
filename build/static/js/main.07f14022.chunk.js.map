{"version":3,"sources":["serviceWorker.js","components/Posts/LatestPosts.tsx","components/Home/Jumbotron.tsx","components/Home/Home.tsx","components/Posts/Posts.tsx","components/RenderedPost/RenderedPost.tsx","components/RichUtils.tsx","components/EditPost/EditPost.tsx","components/ThemeToggle.tsx","components/nav.tsx","components/footer.tsx","components/layout.jsx","components/NewPost/NewPost.tsx","components/Archive/Archive.tsx","App.tsx","index.js"],"names":["Boolean","window","location","hostname","match","memo","useState","metadata","setMetadata","fetchState","setFetchState","useEffect","getPost","then","catch","a","fetch","response","json","postLink","useMemo","map","title","id","tags","last_edited","description","className","href","role","Jumbotron","target","rel","icon","faGithub","size","faExclamationCircle","faDiscord","Home","data","withImages","editor","isVoid","element","type","Element","props","attributes","children","url","Leaf","leaf","bold","code","italic","underline","ImageElement","selected","useSelected","focused","useFocused","contentEditable","src","css","initialValue","text","RenderedPost","useParams","setTitle","lastEdited","setLastEdited","console","log","setValue","JSON","parse","body","value","renderElement","useCallback","renderLeaf","withHistory","withReact","createEditor","onChange","readOnly","Button","React","forwardRef","ref","active","reversed","cx","Icon","textLines","document","nodes","node","toArray","join","Menu","Toolbar","HOTKEYS","LIST_TYPES","toggleMark","format","isMarkActive","Editor","removeMark","addMark","isBlockActive","n","marks","isLinkActive","wrapLink","Transforms","unwrapNodes","unwrapLink","selection","isCollapsed","Range","link","insertNodes","wrapNodes","split","collapse","edge","insertData","getData","files","length","file","reader","FileReader","addEventListener","result","insertImage","readAsDataURL","isImageUrl","image","BlockButton","useSlate","onMouseDown","event","preventDefault","isActive","isList","includes","setNodes","block","toggleBlock","MarkButton","LinkButton","prompt","insertLink","InsertImageButton","useEditor","isUrl","ext","URL","pathname","pop","imageExtensions","EditPost","setDescription","setTags","failed","setFailed","setSubmitted","madeChanges","setMadeChanges","success","setSuccess","submitPost","undefined","localStorage","getItem","scrollTo","top","left","behavior","send_body","stringify","method","headers","e","content","setItem","placeholder","name","defaultValue","required","spellCheck","autoFocus","onKeyDown","hotkey","isHotkey","onClick","Cookies","setThemeState","documentElement","setAttribute","theme","defaultChecked","faMoon","faSun","Nav","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Footer","faReddit","color","Layout","style","margin","maxWidth","padding","NewPost","redirect","App","exact","path","component","Posts","Archive","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.07f14022.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//TODO add pagnation\nimport React, {memo, useEffect, useMemo, useState} from \"react\"\n\nconst LatestPosts = () => {\n    const [metadata, setMetadata] = useState([])\n    // default state of the fetch getPost is loading\n    const [fetchState, setFetchState] = useState(\"loading\")\n    useEffect(() => {\n        getPost()\n            //If the fetch got the data make the state a success\n            .then(() => {\n                setFetchState(\"success\")\n            })\n            //If the fetch was bad set the state of the fecth to failed\n            .catch(() => {\n                setFetchState(\"failed\")\n            })\n    }, []);\n    const getPost = async () => {\n        const response = await fetch('/api/__latestposts__?')\n        await setMetadata(await response.json());\n    };\n    const postLink = useMemo(() => metadata.map(\n        ({title, id, tags, last_edited, description}) => (\n            <div className={\"post-link-jumbo flip-in\"}>\n                <div className={\"post-link-title\"}><a href={\"/render-post/\" + id}><h1 className={\"link\"}>{title}</h1>\n                </a></div>\n                <div>About: {description}</div>\n                <div>Tags: {tags}</div>\n                <div>Last updated: {last_edited}</div>\n            </div>\n        )\n        ),\n        [metadata]);\n    if (fetchState === \"loading\") {\n        return (\n            <div className=\"d-flex justify-content-center\">\n                <div className=\"spinner-border\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n        )\n    }\n    //if we caught a error send a failed message\n    else if (fetchState === \"failed\") {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">Sorry Looks like something is going wrong. Is the API down?\n                Check with Jakku on the Discord.</div>\n        )\n    } else return (\n        <div>\n            <h1 className=\"\">Latest Posts</h1>\n            <div className={\"post-link-jumbo-container\"}>\n                {postLink}\n            </div>\n        </div>\n    );\n}\nexport default memo(LatestPosts)\n","import React, {useEffect, useMemo, useState} from \"react\"\nimport {faDiscord, faGithub} from '@fortawesome/free-brands-svg-icons'\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport Posts from \"../Posts/Posts\";\nimport LatestPosts from \"../Posts/LatestPosts\";\nimport {faExclamationCircle} from \"@fortawesome/free-solid-svg-icons\";\nimport Git from \"./Git\";\n\nconst Jumbotron = () => {\n    return (\n        <div className=\"jumbotron\">\n            <h1 className=\"display-3\">Technical Minecraft Wiki</h1>\n            <p className=\"lead\">Welcome to the Technical Minecraft Wiki.</p>\n            <hr className=\"my-4\"/>\n            {/*<p> It uses utility classes for typography and spacing to space content out within the larger container.</p>*/}\n            <LatestPosts/>\n            <p className=\"lead\">\n                <a className=\"btn btn-lg jumbo-link\" href=\"https://github.com/Jackbaude/tmc-wiki\" target=\"_blank\"\n                   rel=\"noreferrer noopener\" role=\"button\">Contribute <FontAwesomeIcon icon={faGithub} size={\"lg\"}/></a>\n                <a className=\"btn btn-lg jumbo-link\" href=\"https://github.com/Jackbaude/tmc-frontend/issues/new\"\n                   target=\"_blank\"\n                   rel=\"noreferrer noopener\" role=\"button\">Issues <FontAwesomeIcon icon={faExclamationCircle}\n                                                                                   size={\"lg\"}/></a>\n                <a className=\"btn btn-lg jumbo-link\" href=\"https://discord.gg/FcTFg2E\" target=\"_blank\"\n                   rel=\"noreferrer noopener\" role=\"button\">Connect <FontAwesomeIcon icon={faDiscord} size={\"lg\"}/></a>\n            </p>\n\n            {/*<Git/>*/}\n        </div>\n    );\n}\n\nexport default Jumbotron\n","import React from \"react\"\nimport Carousel from \"./Carousel\";\nimport Jumbotron from \"./Jumbotron\";\n\nconst Home = () => (\n    <div className={\"home\"}>\n            {/*<Carousel/>*/}\n            <Jumbotron/>\n            <h2 id=\"purpose\">Purpose</h2>\n            <hr className=\"dividing-line\"/>\n            <p>Our initiative for building a wiki for the community is to organize everyone's knowledge into one\n                place that is\n                accessible and quick to reference. Getting started with technical\n                minecraft can be confusing and complicated, but the wiki can help those who\n                are new to enter the community. Now that there is a place to store everyone's\n                knowledge it also makes it easier and more transparent for large scale projects\n                across versions.</p>\n            <h2 id=\"contribute\">Contribute</h2>\n            <hr className=\"dividing-line\"/>\n            <p>There are many ways that you can contribute to the project. The project is still getting off the\n                ground, and we\n                are looking for people to help fill posts on the wiki. The project as of right now is fairly simple,\n                but as it\n                goes on it could get more complicated, and we are looking for people to help use build. Please consider\n                making issues with features that  you would like to see, or sending in pull requests and doing it\n                yourself. Currently only myself and another heakte member are working on this project and we appreciate\n                all the help we can get.\n            </p>\n            <h2 id=\"license\">License</h2>\n            <hr className=\"dividing-line\"/>\n            <p>A short and simple permissive license with conditions only requiring preservation of copyright and\n                license\n                notices. Licensed works, modifications, and larger works may be distributed under different terms\n                and without\n                source code.</p>\n            <p>MIT © Jack Baude</p>\n\n\n    </div>\n)\n\nexport default Home\n","//TODO add pagnation\nimport React, {memo, useCallback, useEffect, useMemo, useState} from \"react\"\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faDiscord} from \"@fortawesome/free-brands-svg-icons\";\n\nconst Posts = () => {\n    const [metadata, setMetadata] = useState([])\n    //default state of the fetch getPost is loading\n    const [fetchState, setFetchState] = useState(\"loading\")\n    useEffect(() => {\n        getPost()\n            //If the fetch got the data make the state a success\n            .then(() => {\n                setFetchState(\"success\")\n            })\n            //If the fetch was bad set the state of the fecth to failed\n            .catch(() => {\n                setFetchState(\"failed\")\n            })\n    }, []);\n    const getPost = async () => {\n        const response = await fetch('/api/__allposts__?')\n        const data = await response.json()\n        await setMetadata(data);\n    };\n    const postLink = useMemo(() => metadata.map(\n        ({title, id, tags, last_edited, description}) => (\n            <div className={\"post-link slide\"}>\n                <div className={\"post-link-title\"}><a href={\"/render-post/\" + id}><h1 className={\"link\"}>{title}</h1>\n                </a></div>\n                <div>About: {description}</div>\n                <div>Tags: {tags}</div>\n                <div>Last updated: {last_edited}</div>\n            </div>\n        )\n        ),\n        [metadata]);\n    // if the post is still loading just render a loading bar\n    if (fetchState === \"loading\") {\n        return (\n            <div className=\"d-flex justify-content-center\">\n                <div className=\"spinner-border\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n        )\n    }\n    //if we caught a error send a failed message\n    else if (fetchState === \"failed\") {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">Sorry Looks like something is going wrong. Is the API down? Check with Jakku on the Discord.</div>\n        )\n    } else return (\n        <div>\n            {postLink}\n        </div>\n    );\n}\nexport default memo(Posts)\n","import React, {useState, useMemo, useCallback, useEffect} from 'react'\nimport {Node, Editor, createEditor} from 'slate'\nimport {\n    Slate,\n    Editable,\n    useSelected,\n    useFocused,\n    withReact,\n\n} from 'slate-react'\nimport {withHistory} from 'slate-history'\nimport {css} from 'emotion'\nimport {useParams} from \"react-router\";\n\nconst RenderedPost = () => {\n    const {id} = useParams();\n    const [fetchState, setFetchState] = useState(\"loading\")\n    useEffect(() => {\n        getPost()\n            //If the fetch got the data make the state a success\n            .then(() => {\n                setFetchState(\"success\")\n            })\n            //If the fetch was bad set the state of the fecth to failed\n            .catch(() => {\n                setFetchState(\"failed\")\n            })\n    }, []);\n\n    const [title, setTitle] = useState('')\n    const [lastEdited, setLastEdited] = useState('')\n    const getPost = async () => {\n        const response = await fetch('/api/__getpost__?id=' + id)\n        const data = await response.json()\n        console.log(data)\n        setTitle(data.title)\n        setLastEdited(data.last_edited)\n        setValue(JSON.parse(data.body))\n    }\n    const [value, setValue] = useState<Node[]>(initialValue)\n    const renderElement = useCallback(props => <Element {...props} />, [])\n    const renderLeaf = useCallback(props => <Leaf {...props} />, [])\n    const editor = useMemo(\n        () => withImages(withHistory(withReact(createEditor()))),\n        []\n    )\n\n    // if the post is still loading just render a loading bar\n    if (fetchState === \"loading\") {\n        return (\n            <div className=\"d-flex justify-content-center\">\n                <div className=\"spinner-border\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n        )\n    }\n    //if we caught a error send a failed message\n    else if (fetchState === \"failed\") {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">Sorry Looks like something is going wrong. Are you sure\n                this post exists? Is the API down? Check with Jakku on the Discord.</div>\n        )\n    }\n    return (\n        <div>\n            <h1>{title}</h1>\n            <p>Last Edited: {lastEdited}</p>\n            <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n                <Editable\n                    renderElement={renderElement}\n                    renderLeaf={renderLeaf}\n                    readOnly\n                />\n                <div className={\"spacing-block\"}/>\n            </Slate>\n            <a className={\"btn btn-primary btn-lg\"} href={\"/edit-post/\" + id}>Edit Post</a>\n        </div>\n    )\n\n}\nconst withImages = editor => {\n    const {isVoid} = editor\n\n    editor.isVoid = element => {\n        return element.type === 'image' ? true : isVoid(element)\n    }\n    return editor\n}\nconst Element = props => {\n    const {attributes, children, element} = props\n\n    switch (element.type) {\n        case 'block-quote':\n            return <blockquote {...attributes}>{children}</blockquote>\n        case 'bulleted-list':\n            return <ul {...attributes}>{children}</ul>\n        case 'heading-one':\n            return <h1 {...attributes}>{children}</h1>\n        case 'heading-two':\n            return <h2 {...attributes}>{children}</h2>\n        case 'list-item':\n            return <li {...attributes}>{children}</li>\n        case 'numbered-list':\n            return <ol {...attributes}>{children}</ol>\n        case 'image':\n            return <ImageElement {...props} />\n        case 'link':\n            return (\n                <a {...attributes} href={element.url}>\n                    {children}\n                </a>\n            )\n        default:\n            return <p {...attributes}>{children}</p>\n    }\n}\nconst Leaf = ({attributes, children, leaf}) => {\n    if (leaf.bold) {\n        children = <strong>{children}</strong>\n    }\n\n    if (leaf.code) {\n        children = <code>{children}</code>\n    }\n\n    if (leaf.italic) {\n        children = <em>{children}</em>\n    }\n\n    if (leaf.underline) {\n        children = <u>{children}</u>\n    }\n\n    return <span {...attributes}>{children}</span>\n}\nconst ImageElement = ({attributes, children, element}) => {\n    const selected = useSelected()\n    const focused = useFocused()\n    return (\n        <div {...attributes}>\n            <div contentEditable={false}>\n                <img\n                    src={element.url}\n                    className={css`\n            display: block;\n            max-width: 100%;\n            max-height: 20em;\n            box-shadow: ${selected && focused ? '0 0 0 3px #B4D5FF' : 'none'};\n          `}\n                />\n            </div>\n            {children}\n        </div>\n    )\n}\nconst initialValue = [\n    {\n        children: [\n            {text: ''},\n        ],\n    },\n]\n\nexport default RenderedPost","import React, { Ref, PropsWithChildren } from 'react'\nimport ReactDOM from 'react-dom'\nimport { cx, css } from 'emotion'\n\ninterface BaseProps {\n    className: string\n    [key: string]: unknown\n}\ntype OrNull<T> = T | null\n\nexport const Button = React.forwardRef(\n    (\n        {\n            className,\n            active,\n            reversed,\n            ...props\n        }: PropsWithChildren<\n            {\n                active: boolean\n                reversed: boolean\n            } & BaseProps\n            >,\n        ref: Ref<OrNull<HTMLSpanElement>>\n    ) => (\n        <span\n            {...props}\n            ref={ref}\n            className={cx(\n                className,\n                css`\n          cursor: pointer;\n          color: ${reversed\n                    ? active\n                        ? 'white'\n                        : '#aaa'\n                    : active\n                        ? 'black'\n                        : '#ccc'};\n        `\n            )}\n        />\n    )\n)\n\nexport const EditorValue = React.forwardRef(\n    (\n        {\n            className,\n            value,\n            ...props\n        }: PropsWithChildren<\n            {\n                value: any\n            } & BaseProps\n            >,\n        ref: Ref<OrNull<null>>\n    ) => {\n        const textLines = value.document.nodes\n            .map(node => node.text)\n            .toArray()\n            .join('\\n')\n        return (\n            <div\n                ref={ref}\n                {...props}\n                className={cx(\n                    className,\n                    css`\n            margin: 30px -20px 0;\n          `\n                )}\n            >\n                <div\n                    className={css`\n            font-size: 14px;\n            padding: 5px 20px;\n            color: #404040;\n            border-top: 2px solid #eeeeee;\n            background: #f8f8f8;\n          `}\n                >\n                    Slate's value as text\n                </div>\n                <div\n                    className={css`\n            color: #404040;\n            font: 12px monospace;\n            white-space: pre-wrap;\n            padding: 10px 20px;\n            div {\n              margin: 0 0 0.5em;\n            }\n          `}\n                >\n                    {textLines}\n                </div>\n            </div>\n        )\n    }\n)\n\nexport const Icon = React.forwardRef(\n    (\n        { className, ...props }: PropsWithChildren<BaseProps>,\n        ref: Ref<OrNull<HTMLSpanElement>>\n    ) => (\n        <span\n            {...props}\n            ref={ref}\n            className={cx(\n                'material-icons',\n                className,\n                css`\n          font-size: 30px;\n          vertical-align: text-bottom;\n        `\n            )}\n        />\n    )\n)\n\nexport const Instruction = React.forwardRef(\n    (\n        { className, ...props }: PropsWithChildren<BaseProps>,\n        ref: Ref<OrNull<HTMLDivElement>>\n    ) => (\n        <div\n            {...props}\n            ref={ref}\n            className={cx(\n                className,\n                css`\n          white-space: pre-wrap;\n          margin: 0 -20px 10px;\n          padding: 10px 20px;\n          font-size: 14px;\n          background: #f8f8e8;\n        `\n            )}\n        />\n    )\n)\n\nexport const Menu = React.forwardRef(\n    (\n        { className, ...props }: PropsWithChildren<BaseProps>,\n        ref: Ref<OrNull<HTMLDivElement>>\n    ) => (\n        <div\n            {...props}\n            ref={ref}\n            className={cx(\n                className,\n                css`\n          & > * {\n            display: inline-block;\n          }\n\n          & > * + * {\n            margin-left: 15px;\n          }\n        `\n            )}\n        />\n    )\n)\n\nexport const Portal = ({ children }) => {\n    return ReactDOM.createPortal(children, document.body)\n}\n\nexport const Toolbar = React.forwardRef(\n    (\n        { className, ...props }: PropsWithChildren<BaseProps>,\n        ref: Ref<OrNull<HTMLDivElement>>\n    ) => (\n        <Menu\n            {...props}\n            ref={ref}\n            className={cx(\n                className,\n                css`\n          position: relative;\n          padding: 1px 18px 17px;\n          margin: 0 -20px;\n          border-bottom: 2px solid #eee;\n          margin-bottom: 20px;\n        `\n            )}\n        />\n    )\n)","import React, {useState, useMemo, useCallback, useEffect} from 'react'\nimport imageExtensions from 'image-extensions'\nimport isUrl from 'is-url'\nimport isHotkey from 'is-hotkey'\nimport {Node, Transforms, Editor, Range, createEditor} from 'slate'\nimport {\n    Slate,\n    Editable,\n    useEditor,\n    useSelected,\n    useFocused,\n    withReact,\n    useSlate,\n} from 'slate-react'\nimport {withHistory} from 'slate-history'\nimport {css} from 'emotion'\n\nimport {Button, Icon, Toolbar} from '../RichUtils'\nimport {convertFromRaw, EditorState} from \"draft-js\";\nimport {useParams} from \"react-router\";\n\n\nconst HOTKEYS = {\n    'mod+b': 'bold',\n    'mod+i': 'italic',\n    'mod+u': 'underline',\n    'mod+`': 'code',\n}\nconst LIST_TYPES = ['numbered-list', 'bulleted-list']\nconst EditPost = () => {\n    useEffect(() => {\n        getPost()\n            //If the fetch got the data make the state a success\n            .then(() => {\n                setFetchState(\"success\")\n            })\n            //If the fetch was bad set the state of the fecth to failed\n            .catch(() => {\n                setFetchState(\"failed\")\n            })\n    }, []);\n    // Id of the post\n    const {id} = useParams();\n    //States\n    const [fetchState, setFetchState] = useState(\"loading\")\n    const [title, setTitle] = useState('')\n    const [description, setDescription] = useState('')\n    const [tags, setTags] = useState('')\n    const [failed, setFailed] = useState(false)\n    const [submitted, setSubmitted] = useState(false)\n    const [madeChanges, setMadeChanges] = useState(false)\n    const [success, setSuccess] = useState(false)\n    //Editor\n    const [value, setValue] = useState<Node[]>(initialValue)\n    const renderElement = useCallback(props => <Element {...props} />, [])\n    const renderLeaf = useCallback(props => <Leaf {...props} />, [])\n    const editor = useMemo(\n        () => withImages(withHistory(withReact(createEditor()))),\n        []\n    )\n    const getPost = async () => {\n        const response = await fetch('/api/__getpost__?id=' + id)\n        const data = await response.json()\n        console.log(data)\n        await setTitle(data.title)\n        await setDescription(data.description)\n        await setTags(data.tags)\n        await setValue(JSON.parse(data.body))\n    }\n    const submitPost = () => {\n        if ((title === \"\" || description === \"\" || tags === \"\" || window.localStorage.getItem('content') === undefined)) {\n            setFailed(true)\n            window.scrollTo({top: 0, left: 0, behavior: \"smooth\"})\n            return;\n        }\n        var send_body = JSON.stringify({\n            title: title,\n            description: description,\n            tags: tags,\n            body: window.localStorage.getItem('content')\n        })\n\n        fetch(\"/api/__editpost__?id=\" + id, {\n            // Adding method type\n            method: \"POST\",\n            // Adding body or contents to send\n            body: send_body,\n            // Adding headers to the request\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Accept': 'application/json',\n                \"Access-Control-Allow-Origin\": \"http://127.0.0.1:8000\",\n                \"Access-Control-Allow-Methods\": \"POST\",\n                \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\"\n            }\n        })\n            // .then(r => window.location.href = r.url)\n            .then(() => {\n                setSubmitted(true)\n                setSuccess(true)\n            })\n            .catch((e) => {\n                setFailed(true)\n            })\n    }\n    const failedPost = () => {\n        if (failed) {\n            return (<div className=\"alert alert-danger show\" role=\"alert\">\n                <strong>Woah there something went wrong!</strong> Are you sure you filled in all the fields?\n            </div>)\n        } else {\n            return\n        }\n    }\n    const submitButton = () => {\n        if (madeChanges) {\n            return (\n                <button type=\"button\" className={\"btn btn-primary btn-lg\"} value={\"Submit\"}\n                        onClick={submitPost}>Submit Edits\n                </button>\n            )\n        } else {\n            return <div/>\n        }\n    }\n    // if the post is still loading just render a loading bar\n    if (fetchState === \"loading\") {\n        return (\n            <div className=\"d-flex justify-content-center\">\n                <div className=\"spinner-border\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n        )\n    }\n    //if we caught a error send a failed message\n    else if (fetchState === \"failed\") {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">Sorry Looks like something is going wrong. Are you sure\n                this post exists? Is the API down? Check with Jakku on the Discord.</div>\n        )\n    }\n    if (!success) {\n        return (\n\n            <Slate\n                editor={editor}\n                value={value}\n                onChange={value => {\n                    setValue(value)\n                    setMadeChanges(true)\n                    const content = JSON.stringify(value)\n                    localStorage.setItem('content', content)\n                }}\n            >\n                <form className={\"submit-post\"}>\n                    {failedPost()}\n                    <Toolbar>\n                        <MarkButton format=\"bold\" icon=\"format_bold\"/>\n                        <MarkButton format=\"italic\" icon=\"format_italic\"/>\n                        <MarkButton format=\"underline\" icon=\"format_underlined\"/>\n                        <MarkButton format=\"code\" icon=\"code\"/>\n                        <BlockButton format=\"heading-one\" icon=\"looks_one\"/>\n                        <BlockButton format=\"heading-two\" icon=\"looks_two\"/>\n                        <BlockButton format=\"block-quote\" icon=\"format_quote\"/>\n                        <BlockButton format=\"numbered-list\" icon=\"format_list_numbered\"/>\n                        <BlockButton format=\"bulleted-list\" icon=\"format_list_bulleted\"/>\n                        <InsertImageButton/>\n                        <LinkButton/>\n                    </Toolbar>\n                    <input\n                        type={\"text\"}\n                        id={\"title\"}\n                        onChange={event => {\n                            setTitle(event.target.value)\n                            setMadeChanges(true)\n                        }}\n                        placeholder={\"Title\"}\n                        name={\"title\"}\n                        defaultValue={title}\n                        required/>\n                    <br/>\n                    <input type={\"text\"}\n                           onChange={event => {\n                               setDescription(event.target.value)\n                               setMadeChanges(true)\n                           }}\n                           placeholder={\"Description\"}\n                           name={\"description\"}\n                           defaultValue={description}\n                           required/>\n                    <br/>\n                    <input type={\"text\"}\n                           onChange={event => {\n                               setTags(event.target.value)\n                               setMadeChanges(true)\n                           }}\n                           placeholder={\"Tags\"}\n                           name={\"tags\"}\n                           defaultValue={tags}\n                           required/>\n                    <Editable\n                        renderElement={renderElement}\n                        renderLeaf={renderLeaf}\n                        placeholder=\"Enter some rich text…\"\n                        spellCheck\n                        autoFocus\n                        onKeyDown={event => {\n                            for (const hotkey in HOTKEYS) {\n                                if (isHotkey(hotkey, event as any)) {\n                                    event.preventDefault()\n                                    const mark = HOTKEYS[hotkey]\n                                    toggleMark(editor, mark)\n                                }\n                            }\n                        }}\n                    />\n                    <div className={\"spacing-block\"}/>\n                    {submitButton()}\n\n                </form>\n            </Slate>\n        )\n    } else {\n        return (\n            <div className=\"alert alert-success\" role=\"alert\">\n                <h4 className=\"alert-heading\">Success!</h4>\n                <hr/>\n                <p>We appreciate your contribution to not only the technical minecraft wiki, but also the community as a\n                    whole. People like you\n                    make this community fun and expanding. Keep up the great work, and we hope to see you again!\n                </p>\n            </div>\n        )\n    }\n}\n\nconst toggleBlock = (editor, format) => {\n    const isActive = isBlockActive(editor, format)\n    const isList = LIST_TYPES.includes(format)\n\n    Transforms.unwrapNodes(editor, {\n        match: n => LIST_TYPES.includes(n.type as string),\n        split: true,\n    })\n\n    Transforms.setNodes(editor, {\n        type: isActive ? 'paragraph' : isList ? 'list-item' : format,\n    })\n\n    if (!isActive && isList) {\n        const block = {type: format, children: []}\n        Transforms.wrapNodes(editor, block)\n    }\n}\n\nconst toggleMark = (editor, format) => {\n    const isActive = isMarkActive(editor, format)\n\n    if (isActive) {\n        Editor.removeMark(editor, format)\n    } else {\n        Editor.addMark(editor, format, true)\n    }\n}\n\nconst isBlockActive = (editor, format) => {\n    const [match] = Editor.nodes(editor, {\n        match: n => n.type === format,\n    })\n\n    return !!match\n}\n\nconst isMarkActive = (editor, format) => {\n    const marks = Editor.marks(editor)\n    return marks ? marks[format] === true : false\n}\nconst withLinks = editor => {\n    const {insertData, insertText, isInline} = editor\n\n    editor.isInline = element => {\n        return element.type === 'link' ? true : isInline(element)\n    }\n\n    editor.insertText = text => {\n        if (text && isUrl(text)) {\n            wrapLink(editor, text)\n        } else {\n            insertText(text)\n        }\n    }\n\n    editor.insertData = data => {\n        const text = data.getData('text/plain')\n\n        if (text && isUrl(text)) {\n            wrapLink(editor, text)\n        } else {\n            insertData(data)\n        }\n    }\n\n    return editor\n}\n\nconst insertLink = (editor, url) => {\n    if (editor.selection) {\n        wrapLink(editor, url)\n    }\n}\n\nconst isLinkActive = editor => {\n    const [link] = Editor.nodes(editor, {match: n => n.type === 'link'})\n    return !!link\n}\n\nconst unwrapLink = editor => {\n    Transforms.unwrapNodes(editor, {match: n => n.type === 'link'})\n}\n\nconst wrapLink = (editor, url) => {\n    if (isLinkActive(editor)) {\n        unwrapLink(editor)\n    }\n\n    const {selection} = editor\n    const isCollapsed = selection && Range.isCollapsed(selection)\n    const link = {\n        type: 'link',\n        url,\n        children: isCollapsed ? [{text: url}] : [],\n    }\n\n    if (isCollapsed) {\n        Transforms.insertNodes(editor, link)\n    } else {\n        Transforms.wrapNodes(editor, link, {split: true})\n        Transforms.collapse(editor, {edge: 'end'})\n    }\n}\nconst withImages = editor => {\n    const {insertData, isVoid} = editor\n\n    editor.isVoid = element => {\n        return element.type === 'image' ? true : isVoid(element)\n    }\n\n    editor.insertData = data => {\n        const text = data.getData('text/plain')\n        const {files} = data\n\n        if (files && files.length > 0) {\n            for (const file of files) {\n                const reader = new FileReader()\n                const [mime] = file.type.split('/')\n\n                if (mime === 'image') {\n                    reader.addEventListener('load', () => {\n                        const url = reader.result\n                        insertImage(editor, url)\n                    })\n\n                    reader.readAsDataURL(file)\n                }\n            }\n        } else if (isImageUrl(text)) {\n            insertImage(editor, text)\n        } else {\n            insertData(data)\n        }\n    }\n\n    return editor\n}\n\nconst insertImage = (editor, url) => {\n    const text = {text: ''}\n    const image = {type: 'image', url, children: [text]}\n    Transforms.insertNodes(editor, image)\n}\n\nconst Element = props => {\n    const {attributes, children, element} = props\n\n    switch (element.type) {\n        case 'block-quote':\n            return <blockquote {...attributes}>{children}</blockquote>\n        case 'bulleted-list':\n            return <ul {...attributes}>{children}</ul>\n        case 'heading-one':\n            return <h1 {...attributes}>{children}</h1>\n        case 'heading-two':\n            return <h2 {...attributes}>{children}</h2>\n        case 'list-item':\n            return <li {...attributes}>{children}</li>\n        case 'numbered-list':\n            return <ol {...attributes}>{children}</ol>\n        case 'image':\n            return <ImageElement {...props} />\n        case 'link':\n            return (\n                <a {...attributes} href={element.url}>\n                    {children}\n                </a>\n            )\n        default:\n            return <p {...attributes}>{children}</p>\n    }\n}\nconst Leaf = ({attributes, children, leaf}) => {\n    if (leaf.bold) {\n        children = <strong>{children}</strong>\n    }\n\n    if (leaf.code) {\n        children = <code>{children}</code>\n    }\n\n    if (leaf.italic) {\n        children = <em>{children}</em>\n    }\n\n    if (leaf.underline) {\n        children = <u>{children}</u>\n    }\n\n    return <span {...attributes}>{children}</span>\n}\nconst BlockButton = ({format, icon}) => {\n    const editor = useSlate()\n    return (\n        <Button\n            active={isBlockActive(editor, format)}\n            onMouseDown={event => {\n                event.preventDefault()\n                toggleBlock(editor, format)\n            }}\n        >\n            <Icon>{icon}</Icon>\n        </Button>\n    )\n}\n\nconst MarkButton = ({format, icon}) => {\n    const editor = useSlate()\n    return (\n        <Button\n            active={isMarkActive(editor, format)}\n            onMouseDown={event => {\n                event.preventDefault()\n                toggleMark(editor, format)\n            }}\n        >\n            <Icon>{icon}</Icon>\n        </Button>\n    )\n}\nconst LinkButton = () => {\n    const editor = useSlate()\n    return (\n        <Button\n            active={isLinkActive(editor)}\n            onMouseDown={event => {\n                event.preventDefault()\n                const url = window.prompt('Enter the URL of the link:')\n                if (!url) return\n                insertLink(editor, url)\n            }}\n        >\n            <Icon>link</Icon>\n        </Button>\n    )\n}\nconst ImageElement = ({attributes, children, element}) => {\n    const selected = useSelected()\n    const focused = useFocused()\n    return (\n        <div {...attributes}>\n            <div contentEditable={false}>\n                <img\n                    src={element.url}\n                    className={css`\n            display: block;\n            max-width: 100%;\n            max-height: 20em;\n            box-shadow: ${selected && focused ? '0 0 0 3px #B4D5FF' : 'none'};\n          `}\n                />\n            </div>\n            {children}\n        </div>\n    )\n}\n\nconst InsertImageButton = () => {\n    const editor = useEditor()\n    return (\n        <Button\n            onMouseDown={event => {\n                event.preventDefault()\n                const url = window.prompt('Enter the URL of the image:')\n                if (!url) return\n                insertImage(editor, url)\n            }}\n        >\n            <Icon>image</Icon>\n        </Button>\n    )\n}\n\nconst isImageUrl = url => {\n    if (!url) return false\n    if (!isUrl(url)) return false\n    const ext = new URL(url).pathname.split('.').pop()\n    return imageExtensions.includes(ext)\n}\n\nconst initialValue = [\n    {\n        children: [\n            { text: '' },\n        ],\n    },\n]\n\nexport default EditPost","import React, {memo, useEffect, useState} from \"react\"\nimport Cookies from 'universal-cookie';\nimport {faAlignJustify, faMoon, faSun} from '@fortawesome/free-solid-svg-icons'\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nconst ThemeToggle = () => {\n    const cookies = new Cookies();\n    const [themeState, setThemeState] = useState(localStorage.getItem('mode'))\n    const toggleTheme = () => {\n        const theme = localStorage.getItem('mode') === 'dark' ? 'light' : 'dark';\n        setThemeState(theme)\n        localStorage.setItem('mode', theme);\n    }\n    document.documentElement.setAttribute(\"data-theme\", localStorage.getItem('mode'));\n\n    return (\n        <div>\n            <label className=\"theme-toggle-switch\">\n                <input type=\"checkbox\" onClick={toggleTheme} className={\"theme-toggle\"}\n                       defaultChecked={((localStorage.getItem('mode')) === \"dark\")}/>\n                {/*If the checkbox is checked, dark, render the moon, else render the sun if it is in light mode*/}\n                {((localStorage.getItem('mode')) === \"dark\")\n                    ? <FontAwesomeIcon icon={faMoon}/>\n                    : <FontAwesomeIcon icon={faSun}/>\n                }\n                <span className=\"slider round\"/>\n            </label>\n            <div>\n\n            </div>\n        </div>\n    )\n}\nexport default memo(ThemeToggle)\n","import React, {useState} from \"react\"\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faDiscord, faYoutube, faGithub} from '@fortawesome/free-brands-svg-icons'\nimport {faAlignJustify, faMoon, faSun} from '@fortawesome/free-solid-svg-icons'\nimport ThemeToggle from \"./ThemeToggle\";\n\nconst Nav = () => {\n    return (\n        <div>\n            <nav className=\"navbar navbar-expand-lg\">\n                <button className=\"navbar-toggler custom-toggler\" type=\"button\" data-toggle=\"collapse\"\n                        data-target=\"#navbarToggler\"\n                        aria-controls=\"navbarToggler\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"/>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarToggler\">\n                    <a className=\"navbar-brand\" href=\"/\"><h2 className={\"flip-in\"}>Technical Minecraft Wiki</h2></a>\n                    <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n                        <li className=\"nav-item active\">\n                            <a className=\"nav-link link\" href=\"/\">Home<span className=\"sr-only\">(current)</span></a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link link\" href=\"/posts\">Posts</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link link\" href=\"/new-post\">New Post</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link link\" href=\"/archive\">Archive</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"https://github.com/Jackbaude/tmc-wiki\" target=\"_blank\"\n                               rel=\"noreferrer noopener\"><FontAwesomeIcon icon={faGithub} size={\"lg\"}/></a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"https://discord.gg/FcTFg2E\" target=\"_blank\"\n                               rel=\"noreferrer noopener\"><FontAwesomeIcon icon={faDiscord} size={\"lg\"}/></a>\n                        </li>\n\n                    </ul>\n                    <ThemeToggle/>\n                </div>\n            </nav>\n        </div>\n)\n}\nexport default Nav","import React from \"react\"\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faDiscord, faGithub, faYoutube, faReddit} from '@fortawesome/free-brands-svg-icons'\n\nconst Footer = () => (\n    <div>\n        <footer className=\"page-footer font-small special-color-dark pt-4\">\n            <div className=\"container\">\n                <nav className=\"list-unstyled list-inline text-center\">\n                    <a className=\"footer-icon\" href=\"https://github.com/Jackbaude/tmc-wiki\" target=\"_blank\"\n                       rel=\"noreferrer noopener\">\n                        <FontAwesomeIcon icon={faGithub} size=\"2x\"/>\n                    </a>\n                    <a className=\"footer-icon\" href=\"https://discord.gg/FcTFg2E\" target=\"_blank\"\n                       rel=\"noreferrer noopener\">\n                        <FontAwesomeIcon icon={faDiscord} size=\"2x\"/>\n                    </a>\n                    <a className=\"footer-icon\"\n                       href=\"https://www.reddit.com/r/technicalminecraft/\" target=\"_blank\"\n                       rel=\"noreferrer noopener\">\n                        <FontAwesomeIcon icon={faReddit} size=\"2x\" color={\"\"}/>\n                    </a>\n                </nav>\n            </div>\n            <div className=\"footer-copyright text-center py-3\">© 2020 Copyright:\n                <a className={\"link\"} href=\"www.technicalmc.xyz/\"> technicalmc.xyz</a>\n            </div>\n        </footer>\n    </div>\n)\n\nexport default Footer\n","import React from \"react\"\nimport Nav from \"./nav\";\nimport Footer from \"./footer\";\nimport PropTypes from \"prop-types\"\n\nconst Layout = ({children}) => {\n    return (\n        <div id={\"page-container\"}>\n            <Nav/>\n            <div\n                style={{\n                    margin: `5vw auto 0 auto`,\n                    maxWidth: 1100,\n                    padding: `0 1.0875rem 10rem`,\n                //    padding: `0 1.0875rem 1.45rem`,\n                }}\n            >\n                <main id=\"main\">{children}</main>\n            </div>\n            <Footer/>\n        </div>\n    )\n}\n\nLayout.propTypes = {\n    children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React, {useState, useMemo, useCallback} from 'react'\nimport imageExtensions from 'image-extensions'\nimport isUrl from 'is-url'\nimport isHotkey from 'is-hotkey'\nimport {Node, Transforms, Editor, Range, createEditor} from 'slate'\nimport {\n    Slate,\n    Editable,\n    useEditor,\n    useSelected,\n    useFocused,\n    withReact,\n    useSlate,\n} from 'slate-react'\nimport {withHistory} from 'slate-history'\nimport {css} from 'emotion'\n\nimport {Button, Icon, Toolbar} from '../RichUtils'\n\n\nconst HOTKEYS = {\n    'mod+b': 'bold',\n    'mod+i': 'italic',\n    'mod+u': 'underline',\n    'mod+`': 'code',\n}\nconst LIST_TYPES = ['numbered-list', 'bulleted-list']\nconst NewPost = () => {\n    const [title, setTitle] = useState('')\n    const [description, setDescription] = useState('')\n    const [tags, setTags] = useState('')\n    const [failed, setFailed] = useState(false)\n    const [submitted, setSubmitted] = useState(false)\n    const [madeChanges, setMadeChanges] = useState(false)\n    const [success, setSuccess] = useState(false)\n    const [value, setValue] = useState<Node[]>(initialValue)\n    const renderElement = useCallback(props => <Element {...props} />, [])\n    const renderLeaf = useCallback(props => <Leaf {...props} />, [])\n    const editor = useMemo(\n        () => withImages(withHistory(withReact(createEditor()))),\n        []\n    )\n    const submitPost = () => {\n        // if the title, description, or tags are empty\n        if ((title === \"\" || description === \"\" || tags === \"\")) {\n            //set the fail state to true, which renders in the alert, then scroll to the top, and return before it submits the post\n            setFailed(true)\n            window.scrollTo({top: 0, left: 0, behavior: \"smooth\"})\n            return\n        }\n        const body = JSON.stringify({\n            title: title,\n            description: description,\n            tags: tags,\n            body: window.localStorage.getItem('content')\n        })\n        fetch(\"/api/__newpost__\", {\n            // Adding method type\n            method: \"POST\",\n            // Adding body or contents to send\n            body: body,\n            // Adding headers to the request\n            redirect: \"follow\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Accept': 'application/json',\n                \"Access-Control-Allow-Methods\": \"POST\",\n                \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\"\n            }\n        })\n            // .then(r => window.location.href = r.url)\n            .then(() => {\n                setSubmitted(true)\n                setSuccess(true)\n            })\n            .catch(() => {\n                setFailed(true)\n            })\n\n    }\n    const failedPost = () => {\n        if (failed) {\n            return (<div className=\"alert alert-danger show\" role=\"alert\">\n                <strong>Woah there something went wrong!</strong> Are you sure you filled in all the fields?\n            </div>)\n        } else {\n            return\n        }\n    }\n    const submitButton = () => {\n        if (madeChanges) {\n            return (\n                <button type=\"button\" className={\"btn btn-primary btn-lg\"} value={\"Submit\"}\n                        onClick={submitPost}>Create Post\n                </button>\n            )\n        } else {\n            return <div/>\n        }\n    }\n    if (!success) {\n        return (\n            <Slate\n                editor={editor}\n                value={value}\n                onChange={value => {\n                    setValue(value)\n                    setMadeChanges(true)\n                    const content = JSON.stringify(value)\n                    localStorage.setItem('content', content)\n                }}\n            >\n                <form className={\"submit-post\"}>\n                    {failedPost()}\n                    <Toolbar>\n                        <MarkButton format=\"bold\" icon=\"format_bold\"/>\n                        <MarkButton format=\"italic\" icon=\"format_italic\"/>\n                        <MarkButton format=\"underline\" icon=\"format_underlined\"/>\n                        <MarkButton format=\"code\" icon=\"code\"/>\n                        <BlockButton format=\"heading-one\" icon=\"looks_one\"/>\n                        <BlockButton format=\"heading-two\" icon=\"looks_two\"/>\n                        <BlockButton format=\"block-quote\" icon=\"format_quote\"/>\n                        <BlockButton format=\"numbered-list\" icon=\"format_list_numbered\"/>\n                        <BlockButton format=\"bulleted-list\" icon=\"format_list_bulleted\"/>\n                        <InsertImageButton/>\n                        <LinkButton/>\n                    </Toolbar>\n                    <input\n                        type={\"text\"}\n                        id={\"title\"}\n                        onChange={event => {\n                            setTitle(event.target.value)\n                            setMadeChanges(true)\n                        }}\n                        placeholder={\"Title\"}\n                        name={\"title\"}\n                        required/>\n                    <br/>\n                    <input type={\"text\"}\n                           onChange={event => {\n                               setDescription(event.target.value)\n                               setMadeChanges(true)\n                           }}\n                           placeholder={\"Description\"}\n                           name={\"description\"}\n                           required/>\n                    <br/>\n                    <input type={\"text\"}\n                           onChange={event => {\n                               setTags(event.target.value)\n                               setMadeChanges(true)\n                           }}\n                           placeholder={\"Tags\"}\n                           name={\"tags\"}\n                           required/>\n                    <Editable\n                        renderElement={renderElement}\n                        renderLeaf={renderLeaf}\n                        placeholder=\"Enter some rich text…\"\n                        spellCheck\n                        autoFocus\n                        onKeyDown={event => {\n                            for (const hotkey in HOTKEYS) {\n                                if (isHotkey(hotkey, event as any)) {\n                                    event.preventDefault()\n                                    const mark = HOTKEYS[hotkey]\n                                    toggleMark(editor, mark)\n                                }\n                            }\n                        }}\n\n                    />\n                    <div className={\"spacing-block\"}/>\n                    {submitButton()}\n\n                </form>\n            </Slate>\n        )\n    } else {\n        return (\n            <div className=\"alert alert-success\" role=\"alert\">\n                <h4 className=\"alert-heading\">Success!</h4>\n                <hr/>\n                <p>We appreciate your contribution to not only the technical minecraft wiki, but also the community as a\n                    whole. People like you\n                    make this community fun and expanding. Keep up the great work, and we hope to see you again!\n                </p>\n            </div>\n        )\n    }\n}\n\nconst toggleBlock = (editor, format) => {\n    const isActive = isBlockActive(editor, format)\n    const isList = LIST_TYPES.includes(format)\n\n    Transforms.unwrapNodes(editor, {\n        match: n => LIST_TYPES.includes(n.type as string),\n        split: true,\n    })\n\n    Transforms.setNodes(editor, {\n        type: isActive ? 'paragraph' : isList ? 'list-item' : format,\n    })\n\n    if (!isActive && isList) {\n        const block = {type: format, children: []}\n        Transforms.wrapNodes(editor, block)\n    }\n}\n\nconst toggleMark = (editor, format) => {\n    const isActive = isMarkActive(editor, format)\n\n    if (isActive) {\n        Editor.removeMark(editor, format)\n    } else {\n        Editor.addMark(editor, format, true)\n    }\n}\n\nconst isBlockActive = (editor, format) => {\n    const [match] = Editor.nodes(editor, {\n        match: n => n.type === format,\n    })\n\n    return !!match\n}\n\nconst isMarkActive = (editor, format) => {\n    const marks = Editor.marks(editor)\n    return marks ? marks[format] === true : false\n}\nconst withLinks = editor => {\n    const {insertData, insertText, isInline} = editor\n\n    editor.isInline = element => {\n        return element.type === 'link' ? true : isInline(element)\n    }\n\n    editor.insertText = text => {\n        if (text && isUrl(text)) {\n            wrapLink(editor, text)\n        } else {\n            insertText(text)\n        }\n    }\n\n    editor.insertData = data => {\n        const text = data.getData('text/plain')\n\n        if (text && isUrl(text)) {\n            wrapLink(editor, text)\n        } else {\n            insertData(data)\n        }\n    }\n\n    return editor\n}\n\nconst insertLink = (editor, url) => {\n    if (editor.selection) {\n        wrapLink(editor, url)\n    }\n}\n\nconst isLinkActive = editor => {\n    const [link] = Editor.nodes(editor, {match: n => n.type === 'link'})\n    return !!link\n}\n\nconst unwrapLink = editor => {\n    Transforms.unwrapNodes(editor, {match: n => n.type === 'link'})\n}\n\nconst wrapLink = (editor, url) => {\n    if (isLinkActive(editor)) {\n        unwrapLink(editor)\n    }\n\n    const {selection} = editor\n    const isCollapsed = selection && Range.isCollapsed(selection)\n    const link = {\n        type: 'link',\n        url,\n        children: isCollapsed ? [{text: url}] : [],\n    }\n\n    if (isCollapsed) {\n        Transforms.insertNodes(editor, link)\n    } else {\n        Transforms.wrapNodes(editor, link, {split: true})\n        Transforms.collapse(editor, {edge: 'end'})\n    }\n}\nconst withImages = editor => {\n    const {insertData, isVoid} = editor\n\n    editor.isVoid = element => {\n        return element.type === 'image' ? true : isVoid(element)\n    }\n\n    editor.insertData = data => {\n        const text = data.getData('text/plain')\n        const {files} = data\n\n        if (files && files.length > 0) {\n            for (const file of files) {\n                const reader = new FileReader()\n                const [mime] = file.type.split('/')\n\n                if (mime === 'image') {\n                    reader.addEventListener('load', () => {\n                        const url = reader.result\n                        insertImage(editor, url)\n                    })\n\n                    reader.readAsDataURL(file)\n                }\n            }\n        } else if (isImageUrl(text)) {\n            insertImage(editor, text)\n        } else {\n            insertData(data)\n        }\n    }\n\n    return editor\n}\n\nconst insertImage = (editor, url) => {\n    const text = {text: ''}\n    const image = {type: 'image', url, children: [text]}\n    Transforms.insertNodes(editor, image)\n}\n\nconst Element = props => {\n    const {attributes, children, element} = props\n\n    switch (element.type) {\n        case 'block-quote':\n            return <blockquote {...attributes}>{children}</blockquote>\n        case 'bulleted-list':\n            return <ul {...attributes}>{children}</ul>\n        case 'heading-one':\n            return <h1 {...attributes}>{children}</h1>\n        case 'heading-two':\n            return <h2 {...attributes}>{children}</h2>\n        case 'list-item':\n            return <li {...attributes}>{children}</li>\n        case 'numbered-list':\n            return <ol {...attributes}>{children}</ol>\n        case 'image':\n            return <ImageElement {...props} />\n        case 'link':\n            return (\n                <a {...attributes} href={element.url}>\n                    {children}\n                </a>\n            )\n        default:\n            return <p {...attributes}>{children}</p>\n    }\n}\nconst Leaf = ({attributes, children, leaf}) => {\n    if (leaf.bold) {\n        children = <strong>{children}</strong>\n    }\n\n    if (leaf.code) {\n        children = <code>{children}</code>\n    }\n\n    if (leaf.italic) {\n        children = <em>{children}</em>\n    }\n\n    if (leaf.underline) {\n        children = <u>{children}</u>\n    }\n\n    return <span {...attributes}>{children}</span>\n}\nconst BlockButton = ({format, icon}) => {\n    const editor = useSlate()\n    return (\n        <Button\n            active={isBlockActive(editor, format)}\n            onMouseDown={event => {\n                event.preventDefault()\n                toggleBlock(editor, format)\n            }}\n        >\n            <Icon>{icon}</Icon>\n        </Button>\n    )\n}\n\nconst MarkButton = ({format, icon}) => {\n    const editor = useSlate()\n    return (\n        <Button\n            active={isMarkActive(editor, format)}\n            onMouseDown={event => {\n                event.preventDefault()\n                toggleMark(editor, format)\n            }}\n        >\n            <Icon>{icon}</Icon>\n        </Button>\n    )\n}\nconst LinkButton = () => {\n    const editor = useSlate()\n    return (\n        <Button\n            active={isLinkActive(editor)}\n            onMouseDown={event => {\n                event.preventDefault()\n                const url = window.prompt('Enter the URL of the link:')\n                if (!url) return\n                insertLink(editor, url)\n            }}\n        >\n            <Icon>link</Icon>\n        </Button>\n    )\n}\nconst ImageElement = ({attributes, children, element}) => {\n    const selected = useSelected()\n    const focused = useFocused()\n    return (\n        <div {...attributes}>\n            <div contentEditable={false}>\n                <img\n                    src={element.url}\n                    className={css`\n            display: block;\n            max-width: 100%;\n            max-height: 20em;\n            box-shadow: ${selected && focused ? '0 0 0 3px #B4D5FF' : 'none'};\n          `}\n                />\n            </div>\n            {children}\n        </div>\n    )\n}\n\nconst InsertImageButton = () => {\n    const editor = useEditor()\n    return (\n        <Button\n            onMouseDown={event => {\n                event.preventDefault()\n                const url = window.prompt('Enter the URL of the image:')\n                if (!url) return\n                insertImage(editor, url)\n            }}\n        >\n            <Icon>image</Icon>\n        </Button>\n    )\n}\n\nconst isImageUrl = url => {\n    if (!url) return false\n    if (!isUrl(url)) return false\n    const ext = new URL(url).pathname.split('.').pop()\n    return imageExtensions.includes(ext)\n}\n\nconst initialValue = [\n    {\n        children: [\n            { text: '' },\n        ],\n    },\n]\n\nexport default NewPost","//TODO add pagnation\nimport React, {memo} from \"react\"\n\nconst Archive = () => {\n    return (\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n                <h1 className=\"display-4\">Archive Coming Soon!</h1>\n                <p className=\"lead\">We are finally taking some of the first steps of making the technical minecraft archive for schematics and files that\n                are significant to the technical minecraft community.</p>\n            </div>\n        </div>\n    );\n}\nexport default memo(Archive)\n","import React, {Component} from 'react';\nimport {BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom';\nimport Home from './components/Home/Home';\nimport Posts from './components/Posts/Posts';\nimport RenderedPost from \"./components/RenderedPost/RenderedPost\";\nimport Nav from \"./components/nav\";\nimport OldNewPost from \"./components/NewPost/OldNewPost\";\nimport EditPost from \"./components/EditPost/EditPost\";\nimport Layout from \"./components/layout\";\nimport NewPost from \"./components/NewPost/NewPost\";\nimport Archive from \"./components/Archive/Archive\";\n\nconst App = () => {\n    return (\n        <Router>\n            <div>\n                <Layout>\n                    <Switch>\n                        <Route exact path='/' component={Home}/>\n                        <Route path='/posts' component={Posts}/>\n                        <Route path='/render-post/:id' component={RenderedPost}/>\n                        <Route path='/new-post' component={NewPost}/>\n                        <Route path='/edit-post/:id' component={EditPost}/>\n                        <Route path='/archive' component={Archive}/>\n                    </Switch>\n                </Layout>\n            </div>\n        </Router>\n    );\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}
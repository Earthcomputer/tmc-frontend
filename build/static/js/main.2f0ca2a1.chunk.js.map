{"version":3,"sources":["serviceWorker.js","components/Posts/LatestPosts.tsx","components/Home/Git.tsx","components/Home/Jumbotron.tsx","components/Home/Home.tsx","components/Posts/Posts.tsx","components/RenderedPost/renderedPost.tsx","components/NewPost/NewPost.tsx","components/EditPost/EditPost.tsx","components/ThemeToggle.tsx","components/nav.tsx","components/footer.tsx","components/layout.jsx","App.tsx","index.js"],"names":["Boolean","window","location","hostname","match","memo","useState","metadata","setMetadata","fetchState","setFetchState","useEffect","getPost","then","catch","a","fetch","response","json","postLink","useMemo","map","title","id","tags","last_edited","description","className","href","role","latestCommits","commit","html_url","message","icon","faGithub","size","Jumbotron","target","rel","faExclamationCircle","faDiscord","Home","data","RenderedPost","useParams","EditorState","createEmpty","editorState","setEditorState","setTitle","lastEdited","setLastEdited","setResGood","console","log","createWithContent","convertFromRaw","JSON","parse","body","ok","readOnly","onChange","NewPost","setDescription","setTags","failed","setFailed","setSubmitted","madeChanges","setMadeChanges","success","setSuccess","toggleInlineStyle","event","preventDefault","style","currentTarget","getAttribute","RichUtils","toggleBlockType","block","submitPost","scrollTo","top","left","behavior","stringify","localStorage","getItem","method","redirect","headers","value","button","getCurrentInlineStyle","has","type","key","data-style","onClick","renderInlineStyleButton","getCurrentBlockType","data-block","renderBlockButton","placeholder","name","required","handleKeyCommand","command","keyBindingFn","getDefaultKeyBinding","content","contentState","getCurrentContent","setItem","convertToRaw","undefined","send_body","e","defaultValue","Cookies","setThemeState","document","documentElement","setAttribute","theme","defaultChecked","faMoon","faSun","Nav","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Footer","faReddit","color","Layout","children","margin","maxWidth","padding","App","exact","path","component","Posts","EditPost","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.2f0ca2a1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//TODO add pagnation\nimport React, {memo, useEffect, useMemo, useState} from \"react\"\n\nconst LatestPosts = () => {\n    const [metadata, setMetadata] = useState([])\n    // default state of the fetch getPost is loading\n    const [fetchState, setFetchState] = useState(\"loading\")\n    useEffect(() => {\n        getPost()\n            //If the fetch got the data make the state a success\n            .then(() => {\n                setFetchState(\"success\")\n            })\n            //If the fetch was bad set the state of the fecth to failed\n            .catch(() => {\n                setFetchState(\"failed\")\n            })\n    }, []);\n    const getPost = async () => {\n        const response = await fetch('/api/__latestposts__?')\n        await setMetadata(await response.json());\n    };\n    const postLink = useMemo(() => metadata.map(\n        ({title, id, tags, last_edited, description}) => (\n            <div className={\"post-link-jumbo flip-in\"}>\n                <div className={\"post-link-title\"}><a href={\"/render-post/\" + id}><h1 className={\"link\"}>{title}</h1>\n                </a></div>\n                <div>About: {description}</div>\n                <div>Tags: {tags}</div>\n                <div>Last updated: {last_edited}</div>\n            </div>\n        )\n        ),\n        [metadata]);\n    if (fetchState === \"loading\") {\n        return (\n            <div className=\"d-flex justify-content-center\">\n                <div className=\"spinner-border\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n        )\n    }\n    //if we caught a error send a failed message\n    else if (fetchState === \"failed\") {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">Sorry Looks like something is going wrong. Is the API down?\n                Check with Jakku on the Discord.</div>\n        )\n    } else return (\n        <div>\n            <h1 className=\"\">Latest Posts</h1>\n            <div className={\"post-link-jumbo-container\"}>\n                {postLink}\n            </div>\n        </div>\n    );\n}\nexport default memo(LatestPosts)\n","//TODO add pagnation\nimport React, {memo, useCallback, useEffect, useMemo, useState} from \"react\"\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faDiscord, faGithub} from \"@fortawesome/free-brands-svg-icons\";\n\nconst Git = () => {\n    const [metadata, setMetadata] = useState([])\n    const [fetchState, setFetchState] = useState(\"loading\")\n    useEffect(() => {\n        getPost()\n            //If the fetch got the data make the state a success\n            .then(() => {\n                setFetchState(\"success\")\n            })\n            //If the fetch was bad set the state of the fecth to failed\n            .catch(() => {\n                setFetchState(\"failed\")\n            })\n    }, []);\n    const getPost = async () => {\n        const response = await fetch('https://api.github.com/repos/Jackbaude/tmc-frontend/commits?per_page=5')\n        await setMetadata(await response.json())\n    };\n    const latestCommits = useMemo(() => metadata.map(\n        ({commit, html_url}) => (\n            <div className={\"\"}>\n                <div>{commit.message}</div>\n                <a href={html_url}>{html_url}</a>\n            </div>\n        )\n        ),\n        [metadata]);\n    // if the post is still loading just render a loading bar\n    if (fetchState === \"loading\") {\n        return (\n            <div className=\"d-flex justify-content-center\">\n                <div className=\"spinner-border\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n        )\n    }\n    //if we caught a error send a failed message\n    else if (fetchState === \"failed\") {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">Sorry Looks like something is going wrong. Is the API down? Check with Jakku on the Discord.</div>\n        )\n    } else return (\n        <div className={\"git-commits\"}>\n            <h1>Latest Commits <FontAwesomeIcon icon={faGithub} size={\"lg\"}/></h1>\n            <hr/>\n            {latestCommits}\n        </div>\n    );\n}\nexport default memo(Git)\n","import React, {useEffect, useMemo, useState} from \"react\"\nimport {faDiscord, faGithub} from '@fortawesome/free-brands-svg-icons'\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport Posts from \"../Posts/Posts\";\nimport LatestPosts from \"../Posts/LatestPosts\";\nimport {faExclamationCircle} from \"@fortawesome/free-solid-svg-icons\";\nimport Git from \"./Git\";\n\nconst Jumbotron = () => {\n    return (\n        <div className=\"jumbotron\">\n            <h1 className=\"display-3\">Technical Minecraft Wiki</h1>\n            <p className=\"lead\">Welcome to the Technical Minecraft Wiki.</p>\n            <hr className=\"my-4\"/>\n            {/*<p> It uses utility classes for typography and spacing to space content out within the larger container.</p>*/}\n            <LatestPosts/>\n            <p className=\"lead\">\n                <a className=\"btn btn-lg jumbo-link\" href=\"https://github.com/Jackbaude/tmc-wiki\" target=\"_blank\"\n                   rel=\"noreferrer noopener\" role=\"button\">Contribute <FontAwesomeIcon icon={faGithub} size={\"lg\"}/></a>\n                <a className=\"btn btn-lg jumbo-link\" href=\"https://github.com/Jackbaude/tmc-frontend/issues/new\" target=\"_blank\"\n                   rel=\"noreferrer noopener\" role=\"button\">Issues <FontAwesomeIcon icon={faExclamationCircle} size={\"lg\"}/></a>\n                <a className=\"btn btn-lg jumbo-link\" href=\"https://discord.gg/FcTFg2E\" target=\"_blank\"\n                   rel=\"noreferrer noopener\" role=\"button\">Connect <FontAwesomeIcon icon={faDiscord} size={\"lg\"}/></a>\n            </p>\n\n            <Git/>\n        </div>\n    );\n}\n\nexport default Jumbotron\n","import React from \"react\"\nimport Carousel from \"./Carousel\";\nimport Jumbotron from \"./Jumbotron\";\n\nconst Home = () => (\n    <div className={\"home\"}>\n            {/*<Carousel/>*/}\n            <Jumbotron/>\n            <h2 id=\"purpose\">Purpose</h2>\n            <hr className=\"dividing-line\"/>\n            <p>Our initiative for building a wiki for the community is to organize everyone's knowledge into one\n                place that is\n                accessible and quick to reference. Getting started with technical\n                minecraft can be confusing and complicated, but the wiki can help those who\n                are new to enter the community. Now that there is a place to store everyone's\n                knowledge it also makes it easier and more transparent for large scale projects\n                across versions.</p>\n            <h2 id=\"contribute\">Contribute</h2>\n            <hr className=\"dividing-line\"/>\n            <p>There are many ways that you can contribute to the project. The project is still getting off the\n                ground, and we\n                are looking for people to help fill posts on the wiki. The project as of right now is fairly simple,\n                but as it\n                goes on it could get more complicated, and we are looking for people to help use build. Please consider\n                making issues with features that  you would like to see, or sending in pull requests and doing it\n                yourself. Currently only myself and another heakte member are working on this project and we appreciate\n                all the help we can get.\n            </p>\n            <h2 id=\"license\">License</h2>\n            <hr className=\"dividing-line\"/>\n            <p>A short and simple permissive license with conditions only requiring preservation of copyright and\n                license\n                notices. Licensed works, modifications, and larger works may be distributed under different terms\n                and without\n                source code.</p>\n            <p>MIT © Jack Baude</p>\n\n\n    </div>\n)\n\nexport default Home\n","//TODO add pagnation\nimport React, {memo, useCallback, useEffect, useMemo, useState} from \"react\"\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faDiscord} from \"@fortawesome/free-brands-svg-icons\";\n\nconst Posts = () => {\n    const [metadata, setMetadata] = useState([])\n    //default state of the fetch getPost is loading\n    const [fetchState, setFetchState] = useState(\"loading\")\n    useEffect(() => {\n        getPost()\n            //If the fetch got the data make the state a success\n            .then(() => {\n                setFetchState(\"success\")\n            })\n            //If the fetch was bad set the state of the fecth to failed\n            .catch(() => {\n                setFetchState(\"failed\")\n            })\n    }, []);\n    const getPost = async () => {\n        const response = await fetch('/api/__allposts__?')\n        const data = await response.json()\n        await setMetadata(data);\n    };\n    const postLink = useMemo(() => metadata.map(\n        ({title, id, tags, last_edited, description}) => (\n            <div className={\"post-link slide\"}>\n                <div className={\"post-link-title\"}><a href={\"/render-post/\" + id}><h1 className={\"link\"}>{title}</h1>\n                </a></div>\n                <div>About: {description}</div>\n                <div>Tags: {tags}</div>\n                <div>Last updated: {last_edited}</div>\n            </div>\n        )\n        ),\n        [metadata]);\n    // if the post is still loading just render a loading bar\n    if (fetchState === \"loading\") {\n        return (\n            <div className=\"d-flex justify-content-center\">\n                <div className=\"spinner-border\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n        )\n    }\n    //if we caught a error send a failed message\n    else if (fetchState === \"failed\") {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">Sorry Looks like something is going wrong. Is the API down? Check with Jakku on the Discord.</div>\n        )\n    } else return (\n        <div>\n            {postLink}\n        </div>\n    );\n}\nexport default memo(Posts)\n","import React, {useEffect, useState} from \"react\"\nimport Draft, {convertFromRaw, Editor, EditorState,} from 'draft-js';\nimport 'draft-js/dist/Draft.css'\n\nimport {useParams} from \"react-router\";\n\n\nconst RenderedPost = () => {\n    const {id} = useParams();\n    const [fetchState, setFetchState] = useState(\"loading\")\n    useEffect(() => {\n        getPost()\n            //If the fetch got the data make the state a success\n            .then(() => {\n                setFetchState(\"success\")\n            })\n            //If the fetch was bad set the state of the fecth to failed\n            .catch(() => {\n                setFetchState(\"failed\")\n            })\n    }, []);\n    const [editorState, setEditorState] = useState(() =>\n        EditorState.createEmpty()\n    );\n    const [title, setTitle] = useState('')\n    const [lastEdited, setLastEdited] = useState('')\n    const [resGood, setResGood] = useState(false)\n    const getPost = async () => {\n        const response = await fetch('/api/__getpost__?id=' + id)\n        const data = await response.json()\n        console.log(data)\n        setTitle(data.title)\n        setLastEdited(data.last_edited)\n        setEditorState(EditorState.createWithContent(convertFromRaw(JSON.parse(data.body))))\n        if (response.ok) {\n            setResGood(true)\n\n        }\n    }\n    // if the post is still loading just render a loading bar\n    if (fetchState === \"loading\") {\n        return (\n            <div className=\"d-flex justify-content-center\">\n                <div className=\"spinner-border\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n        )\n    }\n    //if we caught a error send a failed message\n    else if (fetchState === \"failed\") {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">Sorry Looks like something is going wrong. Are you sure this post exists? Is the API down? Check with Jakku on the Discord.</div>\n        )\n    }\n    return (\n        <div>\n            <h1>{title}</h1>\n            <p>Last Edited: {lastEdited}</p>\n            <Editor\n                editorState={editorState}\n                readOnly={true}\n                onChange={setEditorState}\n            />\n            <a className={\"btn btn-primary btn-lg\"} href={\"/edit-post/\" + id}>Edit Post</a>\n        </div>\n    );\n}\nexport default RenderedPost\n","/*\nTODO add discord auth and give person a role when they make a post\n */\nimport React, {useState} from \"react\"\nimport {Editor, EditorState, RichUtils, getDefaultKeyBinding, convertToRaw} from 'draft-js';\nimport 'draft-js/dist/Draft.css'\n\nconst NewPost = () => {\n    let [editorState, setEditorState] = useState(() =>\n        EditorState.createEmpty(),\n    );\n    const [title, setTitle] = useState('')\n    const [description, setDescription] = useState('')\n    const [tags, setTags] = useState('')\n    const [failed, setFailed] = useState(false)\n    const [submitted, setSubmitted] = useState(false)\n    const [madeChanges, setMadeChanges] = useState(false)\n    const [success, setSuccess] = useState(false)\n    let saveContent = (content) => {\n        window.localStorage.setItem('content', JSON.stringify(convertToRaw(content)));\n        console.log(convertToRaw(content))\n    }\n    let onChange = (editorState) => {\n        setMadeChanges(true)\n        const contentState = editorState.getCurrentContent();\n        saveContent(contentState);\n        console.log('content state', convertToRaw(contentState));\n        setEditorState(editorState);\n    }\n    const handleKeyCommand = (command) => {\n        // inline formatting key commands handles bold, italic, code, underline\n        editorState = RichUtils.handleKeyCommand(editorState, command);\n        if (editorState) {\n            setEditorState(editorState);\n            return 'handled';\n        }\n        return 'not-handled';\n    }\n\n\n    const toggleInlineStyle = (event) => {\n        event.preventDefault();\n        let style = event.currentTarget.getAttribute('data-style');\n        setEditorState(RichUtils.toggleInlineStyle(editorState, style));\n    }\n\n    const toggleBlockType = (event) => {\n        event.preventDefault();\n        let block = event.currentTarget.getAttribute('data-block');\n        setEditorState(RichUtils.toggleBlockType(editorState, block));\n    }\n    const renderBlockButton = (value, block) => {\n        const currentBlockType = RichUtils.getCurrentBlockType(editorState);\n        let className = '';\n        if (currentBlockType === block) {\n            className = 'active';\n        }\n        return (\n            <input\n                type=\"button\"\n                key={block}\n                value={value}\n                data-block={block}\n                onClick={toggleBlockType}\n                className={className}\n            />\n        );\n    }\n\n    const renderInlineStyleButton = (value, style) => {\n        const currentInlineStyle = editorState.getCurrentInlineStyle();\n        let className = '';\n        if (currentInlineStyle.has(style)) {\n            className = 'active';\n        }\n        return (\n            <input\n                type=\"button\"\n                key={style}\n                value={value}\n                className={className}\n                data-style={style}\n                onClick={toggleInlineStyle}\n            />\n\n        );\n    }\n    const inlineStyleButtons = [\n        {\n            value: 'Bold',\n            style: 'BOLD'\n        },\n\n        {\n            value: 'Italic',\n            style: 'ITALIC'\n        },\n\n        {\n            value: 'Underline',\n            style: 'UNDERLINE'\n        },\n\n        {\n            value: 'Strikethrough',\n            style: 'STRIKETHROUGH'\n        },\n\n        {\n            value: 'Code',\n            style: 'CODE'\n        },\n    ];\n\n    const blockTypeButtons = [\n        {\n            value: 'H1',\n            block: 'header-one'\n        },\n\n        {\n            value: 'H2',\n            block: 'header-two'\n        },\n\n        {\n            value: 'H3',\n            block: 'header-three'\n        },\n\n        {\n            value: 'Blockquote',\n            block: 'blockquote'\n        },\n\n        {\n            value: 'Unordered List',\n            block: 'unordered-list-item'\n        },\n\n        {\n            value: 'Ordered List',\n            block: 'ordered-list-item'\n        }\n    ];\n\n    const keyBindingFunction = (event) => {\n        return getDefaultKeyBinding(event);\n    }\n    const submitPost = () => {\n        // if the title, description, or tags are empty\n        if ((title === \"\" || description === \"\" || tags === \"\")) {\n            //set the fail state to true, which renders in the alert, then scroll to the top, and return before it submits the post\n            setFailed(true)\n            window.scrollTo({top: 0, left: 0, behavior: \"smooth\"})\n            return\n        }\n        const body = JSON.stringify({\n            title: title,\n            description: description,\n            tags: tags,\n            body: window.localStorage.getItem('content')\n        })\n        fetch(\"/api/__newpost__\", {\n            // Adding method type\n            method: \"POST\",\n            // Adding body or contents to send\n            body: body,\n            // Adding headers to the request\n            redirect: \"follow\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Accept': 'application/json',\n                \"Access-Control-Allow-Methods\": \"POST\",\n                \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\"\n            }\n        })\n            // .then(r => window.location.href = r.url)\n            .then(() => {\n                setSubmitted(true)\n                setSuccess(true)\n            })\n            .catch(() => {\n                setFailed(true)\n            })\n\n    }\n    const failedPost = () => {\n        if (failed) {\n            return (<div className=\"alert alert-danger show\" role=\"alert\">\n                <strong>Woah there something went wrong!</strong> Are you sure you filled in all the fields?\n            </div>)\n        }\n        else {\n            return\n        }\n    }\n    const submitButton = () => {\n        if (madeChanges) {\n            return (\n                <button type=\"button\" className={\"btn btn-primary btn-lg\"} value={\"Submit\"}\n                        onClick={submitPost}>Create Post\n                </button>\n            )\n        } else {\n            return <div/>\n        }\n    }\n\n    if (!success) {\n        return (\n            <div>\n                {failedPost()}\n                <div className=\"inline-style-options\">\n                    {inlineStyleButtons.map((button) => {\n                        return renderInlineStyleButton(button.value, button.style);\n                    })}\n                </div>\n                <div className=\"block-style-options\">\n                    {blockTypeButtons.map((button) => {\n                        return renderBlockButton(button.value, button.block);\n\n                    })}\n                </div>\n                <form className={\"submit-post\"}>\n                    <input\n                        type={\"text\"}\n                        id={\"title\"}\n                        onChange={event => {\n                            setTitle(event.target.value)\n                            setMadeChanges(true)\n                        }}\n                        placeholder={\"Title\"}\n                        name={\"title\"}\n                        required/>\n                    <br/>\n                    <input type={\"text\"}\n                           onChange={event => {\n                               setDescription(event.target.value)\n                               setMadeChanges(true)\n                           }}\n                           placeholder={\"Description\"}\n                           name={\"description\"}\n                           required/>\n                    <br/>\n                    <input type={\"text\"}\n                           onChange={event => {\n                               setTags(event.target.value)\n                               setMadeChanges(true)\n                           }}\n                           placeholder={\"Tags\"}\n                           name={\"tags\"}\n                           required/>\n                    <Editor\n                        editorState={editorState}\n                        handleKeyCommand={handleKeyCommand}\n                        keyBindingFn={keyBindingFunction}\n                        onChange={onChange}\n                        placeholder={\"Start writing here!\"}\n                    />\n                    <div className={\"spacing-block\"}/>\n                    {submitButton()}\n\n                </form>\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"alert alert-success\" role=\"alert\">\n                <h4 className=\"alert-heading\">Success!</h4>\n                <hr/>\n                <p>We appreciate your contribution to not only the technical minecraft wiki, but also the community as a whole. People like you\n                make this community fun and expanding. Keep up the great work, and we hope to see you again!\n                </p>\n            </div>\n        )\n    }\n}\nexport default NewPost\n\n","import React, {useEffect, useState} from \"react\"\nimport {convertFromRaw, convertToRaw, Editor, EditorState, getDefaultKeyBinding, RichUtils} from 'draft-js';\nimport 'draft-js/dist/Draft.css'\nimport {useParams} from \"react-router\";\n\nconst NewPost = () => {\n    const {id} = useParams();\n    const [fetchState, setFetchState] = useState(\"loading\")\n    const [failed, setFailed] = useState(false);\n    const [submitted, setSubmitted] = useState(false)\n    const [madeChanges, setMadeChanges] = useState(false)\n    const [success, setSuccess] = useState(false)\n    useEffect(() => {\n        getPost()\n            //If the fetch got the data make the state a success\n            .then(() => {\n                setFetchState(\"success\")\n            })\n            //If the fetch was bad set the state of the fecth to failed\n            .catch(() => {\n                setFetchState(\"failed\")\n            })\n    }, []);\n    let [editorState, setEditorState] = useState(() =>\n        EditorState.createEmpty()\n    );\n    const [resGood, setResGood] = useState(false)\n    const postGood = () => {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">Sorry Looks like this post doesnt exist. Check out some\n                other <a href=\"/posts\" className=\"alert-link\">Posts</a></div>\n        )\n    }\n    const getPost = async () => {\n        const response = await fetch('/api/__getpost__?id=' + id)\n        const data = await response.json()\n        console.log(data)\n        await setTitle(data.title)\n        await setDescription(data.description)\n        await setTags(data.tags)\n        await setEditorState(EditorState.createWithContent(convertFromRaw(JSON.parse(data.body))))\n        if (response.ok) {\n            setResGood(true)\n        }\n    }\n    const [title, setTitle] = useState('')\n    const [description, setDescription] = useState('')\n    const [tags, setTags] = useState('')\n\n    let saveContent = (content) => {\n        window.localStorage.setItem('content', JSON.stringify(convertToRaw(content)));\n        console.log(convertToRaw(content))\n    }\n    let onChange = (editorState) => {\n        //if changes were made to the editor state set the made chanegs to true\n        setMadeChanges(true)\n        const contentState = editorState.getCurrentContent();\n        saveContent(contentState);\n        console.log('content state', convertToRaw(contentState));\n        setEditorState(editorState);\n    }\n    const handleKeyCommand = (command) => {\n        // inline formatting key commands handles bold, italic, code, underline\n        editorState = RichUtils.handleKeyCommand(editorState, command);\n        if (editorState) {\n            setEditorState(editorState);\n            return 'handled';\n        }\n        return 'not-handled';\n    }\n\n\n    const toggleInlineStyle = (event) => {\n        event.preventDefault();\n        let style = event.currentTarget.getAttribute('data-style');\n        setEditorState(RichUtils.toggleInlineStyle(editorState, style));\n    }\n\n    const toggleBlockType = (event) => {\n        event.preventDefault();\n        let block = event.currentTarget.getAttribute('data-block');\n        setEditorState(RichUtils.toggleBlockType(editorState, block));\n    }\n    const renderBlockButton = (value, block) => {\n        const currentBlockType = RichUtils.getCurrentBlockType(editorState);\n        let className = '';\n        if (currentBlockType === block) {\n            className = 'active';\n        }\n        return (\n            <input\n                type=\"button\"\n                key={block}\n                value={value}\n                data-block={block}\n                onClick={toggleBlockType}\n                className={className}\n            />\n        );\n    }\n\n    const renderInlineStyleButton = (value, style) => {\n        const currentInlineStyle = editorState.getCurrentInlineStyle();\n        let className = '';\n        if (currentInlineStyle.has(style)) {\n            className = 'active';\n        }\n        return (\n            <input\n                type=\"button\"\n                key={style}\n                value={value}\n                className={className}\n                data-style={style}\n                onClick={toggleInlineStyle}\n            />\n\n        );\n    }\n    const inlineStyleButtons = [\n        {\n            value: 'Bold',\n            style: 'BOLD'\n        },\n\n        {\n            value: 'Italic',\n            style: 'ITALIC'\n        },\n\n        {\n            value: 'Underline',\n            style: 'UNDERLINE'\n        },\n\n        {\n            value: 'Strikethrough',\n            style: 'STRIKETHROUGH'\n        },\n\n        {\n            value: 'Code',\n            style: 'CODE'\n        },\n    ];\n\n    const blockTypeButtons = [\n        {\n            value: 'H1',\n            block: 'header-one'\n        },\n\n        {\n            value: 'H2',\n            block: 'header-two'\n        },\n\n        {\n            value: 'H3',\n            block: 'header-three'\n        },\n\n        {\n            value: 'Blockquote',\n            block: 'blockquote'\n        },\n\n        {\n            value: 'Unordered List',\n            block: 'unordered-list-item'\n        },\n\n        {\n            value: 'Ordered List',\n            block: 'ordered-list-item'\n        }\n    ];\n\n    const keyBindingFunction = (event) => {\n        return getDefaultKeyBinding(event);\n    }\n    const submitPost = () => {\n        if ((title === \"\" || description === \"\" || tags === \"\" || window.localStorage.getItem('content') === undefined)) {\n            setFailed(true)\n            window.scrollTo({top: 0, left: 0, behavior: \"smooth\"})\n            return;\n        }\n        var send_body = JSON.stringify({\n            title: title,\n            description: description,\n            tags: tags,\n            body: window.localStorage.getItem('content')\n        })\n\n        fetch(\"/api/__editpost__?id=\" + id, {\n            // Adding method type\n            method: \"POST\",\n            // Adding body or contents to send\n            body: send_body,\n            // Adding headers to the request\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Accept': 'application/json',\n                \"Access-Control-Allow-Origin\": \"http://127.0.0.1:8000\",\n                \"Access-Control-Allow-Methods\": \"POST\",\n                \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\"\n            }\n        })\n            // .then(r => window.location.href = r.url)\n            .then(() => {\n                setSubmitted(true)\n                setSuccess(true)\n            })\n            .catch((e) => {\n                setFailed(true)\n            })\n    }\n    const failedPost = () => {\n        if (failed) {\n            return (<div className=\"alert alert-danger show\" role=\"alert\">\n                <strong>Woah there something went wrong!</strong> Are you sure you filled in all the fields?\n            </div>)\n        } else {\n            return\n        }\n    }\n    const submitButton = () => {\n        if (madeChanges) {\n            return (\n                <button type=\"button\" className={\"btn btn-primary btn-lg\"} value={\"Submit\"}\n                        onClick={submitPost}>Edit Post\n                </button>\n            )\n        } else {\n            return <div/>\n        }\n    }\n    // if the post is still loading just render a loading bar\n    if (fetchState === \"loading\") {\n        return (\n            <div className=\"d-flex justify-content-center\">\n                <div className=\"spinner-border\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n        )\n    }\n    //if we caught a error send a failed message\n    else if (fetchState === \"failed\") {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">Sorry Looks like something is going wrong. Are you sure\n                this post exists? Is the API down? Check with Jakku on the Discord.</div>\n        )\n    }\n    if (!success) {\n        return (\n            <div>\n                {failedPost()}\n                <div className=\"inline-style-options\">\n                    {inlineStyleButtons.map((button) => {\n                        return renderInlineStyleButton(button.value, button.style);\n                    })}\n                </div>\n                <div className=\"block-style-options\">\n                    {blockTypeButtons.map((button) => {\n                        return renderBlockButton(button.value, button.block);\n\n                    })}\n                </div>\n                <form className={\"submit-post\"}>\n                    <input\n                        type={\"text\"}\n                        id={\"title\"}\n                        onChange={event => {\n                            setTitle(event.target.value)\n                            setMadeChanges(true)\n                        }}\n                        placeholder={\"Title\"}\n                        name={\"title\"}\n                        defaultValue={title}\n                        required/>\n                    <br/>\n                    <input type={\"text\"}\n                           onChange={event => {\n                               setDescription(event.target.value)\n                               setMadeChanges(true)\n                           }}\n                           placeholder={\"Description\"}\n                           name={\"description\"}\n                           defaultValue={description}\n                           required/>\n                    <br/>\n                    <input type={\"text\"}\n                           onChange={event => {\n                               setTags(event.target.value)\n                               setMadeChanges(true)\n                           }}\n                           placeholder={\"Tags\"}\n                           name={\"tags\"}\n                           defaultValue={tags}\n                           required/>\n                    <Editor\n                        editorState={editorState}\n                        handleKeyCommand={handleKeyCommand}\n                        keyBindingFn={keyBindingFunction}\n                        onChange={onChange}\n                        placeholder={\"Start writing here!\"}\n\n                    />\n                    <div className={\"spacing-block\"}/>\n                    {submitButton()}\n                </form>\n            </div>\n        );\n    } if (success) {\n        return (\n            <div className=\"alert alert-success\" role=\"alert\">\n                <h4 className=\"alert-heading\">Success!</h4>\n                <hr/>\n                <p>We appreciate your contribution to not only the technical minecraft wiki, but also the community as a\n                    whole. People like you\n                    make this community fun and expanding. Keep up the great work, and we hope to see you again!\n                </p>\n            </div>\n        )\n    }\n    if (failed) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                <h4 className=\"alert-heading\">Failed to post!</h4>\n                <hr/>\n                <p>Woah something went wrong :(</p>\n            </div>\n        )\n    }\n}\nexport default NewPost\n\n","import React, {memo, useEffect, useState} from \"react\"\nimport Cookies from 'universal-cookie';\nimport {faAlignJustify, faMoon, faSun} from '@fortawesome/free-solid-svg-icons'\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nconst ThemeToggle = () => {\n    const cookies = new Cookies();\n    const [themeState, setThemeState] = useState(localStorage.getItem('mode'))\n    const toggleTheme = () => {\n        const theme = localStorage.getItem('mode') === 'dark' ? 'light' : 'dark';\n        setThemeState(theme)\n        localStorage.setItem('mode', theme);\n    }\n    document.documentElement.setAttribute(\"data-theme\", localStorage.getItem('mode'));\n\n    return (\n        <div>\n            <label className=\"theme-toggle-switch\">\n                <input type=\"checkbox\" onClick={toggleTheme} className={\"theme-toggle\"}\n                       defaultChecked={((localStorage.getItem('mode')) === \"dark\")}/>\n                {/*If the checkbox is checked, dark, render the moon, else render the sun if it is in light mode*/}\n                {((localStorage.getItem('mode')) === \"dark\")\n                    ? <FontAwesomeIcon icon={faMoon}/>\n                    : <FontAwesomeIcon icon={faSun}/>\n                }\n                <span className=\"slider round\"/>\n            </label>\n            <div>\n\n            </div>\n        </div>\n    )\n}\nexport default memo(ThemeToggle)\n","import React, {useState} from \"react\"\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faDiscord, faYoutube, faGithub} from '@fortawesome/free-brands-svg-icons'\nimport {faAlignJustify, faMoon, faSun} from '@fortawesome/free-solid-svg-icons'\nimport ThemeToggle from \"./ThemeToggle\";\n\nconst Nav = () => {\n    return (\n        <div>\n            <nav className=\"navbar navbar-expand-lg\">\n                <button className=\"navbar-toggler custom-toggler\" type=\"button\" data-toggle=\"collapse\"\n                        data-target=\"#navbarToggler\"\n                        aria-controls=\"navbarToggler\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"/>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarToggler\">\n                    <a className=\"navbar-brand\" href=\"/\"><h2 className={\"flip-in\"}>Technical Minecraft Wiki</h2></a>\n                    <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n                        <li className=\"nav-item active\">\n                            <a className=\"nav-link link\" href=\"/\">Home<span className=\"sr-only\">(current)</span></a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link link\" href=\"/posts\">Posts</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link link\" href=\"/new-post\">New Post</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"https://github.com/Jackbaude/tmc-wiki\" target=\"_blank\"\n                               rel=\"noreferrer noopener\"><FontAwesomeIcon icon={faGithub} size={\"lg\"}/></a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"https://discord.gg/FcTFg2E\" target=\"_blank\"\n                               rel=\"noreferrer noopener\"><FontAwesomeIcon icon={faDiscord} size={\"lg\"}/></a>\n                        </li>\n\n                    </ul>\n                    {/*TODO ADD SEARCH!*/}\n                    {/*<form className=\"form-inline my-2 my-lg-n1\">*/}\n                    {/*    <input className=\"form-control mr-sm-2 disabled\" type=\"search\" placeholder=\"Search\"*/}\n                    {/*           aria-label=\"Search\"/>*/}\n                    {/*    <button className=\"btn btn-outline-light my-2 my-sm-0 \" type=\"submit\">Search</button>*/}\n                    {/*</form>*/}\n                    <ThemeToggle/>\n                </div>\n            </nav>\n        </div>\n)\n}\nexport default Nav","import React from \"react\"\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faDiscord, faGithub, faYoutube, faReddit} from '@fortawesome/free-brands-svg-icons'\n\nconst Footer = () => (\n    <div>\n        <footer className=\"page-footer font-small special-color-dark pt-4\">\n            <div className=\"container\">\n                <nav className=\"list-unstyled list-inline text-center\">\n                    <a className=\"footer-icon\" href=\"https://github.com/Jackbaude/tmc-wiki\" target=\"_blank\"\n                       rel=\"noreferrer noopener\">\n                        <FontAwesomeIcon icon={faGithub} size=\"2x\"/>\n                    </a>\n                    <a className=\"footer-icon\" href=\"https://discord.gg/FcTFg2E\" target=\"_blank\"\n                       rel=\"noreferrer noopener\">\n                        <FontAwesomeIcon icon={faDiscord} size=\"2x\"/>\n                    </a>\n                    <a className=\"footer-icon\"\n                       href=\"https://www.reddit.com/r/technicalminecraft/\" target=\"_blank\"\n                       rel=\"noreferrer noopener\">\n                        <FontAwesomeIcon icon={faReddit} size=\"2x\" color={\"\"}/>\n                    </a>\n                </nav>\n            </div>\n            <div className=\"footer-copyright text-center py-3\">© 2020 Copyright:\n                <a className={\"link\"} href=\"www.technicalmc.xyz/\"> technicalmc.xyz</a>\n            </div>\n        </footer>\n    </div>\n)\n\nexport default Footer\n","import React from \"react\"\nimport Nav from \"./nav\";\nimport Footer from \"./footer\";\nimport PropTypes from \"prop-types\"\n\nconst Layout = ({children}) => {\n    return (\n        <div id={\"page-container\"}>\n            <Nav/>\n            <div\n                style={{\n                    margin: `5vw auto 0 auto`,\n                    maxWidth: 1100,\n                    padding: `0 1.0875rem 10rem`,\n                //    padding: `0 1.0875rem 1.45rem`,\n                }}\n            >\n                <main id=\"main\">{children}</main>\n            </div>\n            <Footer/>\n        </div>\n    )\n}\n\nLayout.propTypes = {\n    children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React, {Component} from 'react';\nimport {BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom';\nimport Home from './components/Home/Home';\nimport Posts from './components/Posts/Posts';\nimport RenderedPost from \"./components/RenderedPost/renderedPost\";\nimport Nav from \"./components/nav\";\nimport NewPost from \"./components/NewPost/NewPost\";\nimport EditPost from \"./components/EditPost/EditPost\";\nimport Layout from \"./components/layout\";\n\nconst App = () => {\n    return (\n        <Router>\n            <div>\n                <Layout>\n                    <Switch>\n                        <Route exact path='/' component={Home}/>\n                        <Route path='/posts' component={Posts}/>\n                        <Route path='/render-post/:id' component={RenderedPost}/>\n                        <Route path='/new-post' component={NewPost}/>\n                        <Route path='/edit-post/:id' component={EditPost}/>\n                    </Switch>\n                </Layout>\n            </div>\n        </Router>\n    );\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}